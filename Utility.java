public class Utility {

    /**
     * Permet d'afficher un Message et d'attendre un charactere a saisir par l'utilisateur
     * @param a Donne le charact√®re que doit saisir l'utilisateur
     * @param message Donne le message a afficher a l'utilisateur
     */
   public static void pressChar(char a, String message) {
       System.out.println(message);
       char b = Clavier.saisirChar();
       while (b != a) {
           if(b == 'r'){
               racooned();
               break;
           }
           System.out.println("Error, it's not the right button, please retry : ");
           b = Clavier.saisirChar();
       }
   }


    /**
     * Permet d'afficher une question a un utilisateur et de recuperer sa reponse
     * @param message Donne le message a afficher a l'utilisateur
     * @return char Retourne la reponse de l'utilisateur
     */
    public static char choiceYesNo(String message) {
        System.out.println(message);
        char b = Clavier.saisirChar();
        while (b != 'y' && b != 'n') {
            System.out.println("Error, it's not the right button, please retry : ");
            b = Clavier.saisirChar();
        }
        return b;
    }

    /**
     * Permet de demander une saisie de l'utilisateur par rapport un intervalle
     * @param min Donne la borne minimum
     * @param max donne la borne maximum
     * @param message Donne le message a afficher a l'utilisateur
     * @return int Retourne la reponse de l'utilisateur
     */
    public static int choiceInRange(int min, int max, String message) {
        System.out.println(message);
        int b = Clavier.saisirInt();
        while (b < min || b > max) {
            System.out.println("Please enter a correct value : ");
            b = Clavier.saisirInt();
        }
        return b;
    }

    /**
     * Permet de Donner une orientation aleatoire pour les vecteurs directeurs de deplacement
     * @return Position Retourne un vecteur de deplacement
     */
    public static Position randOr() {
        int or = randInt(0, 7);
        switch (or) {
            case 0: {
                return (new Position(0, 1));
            }
            case 1: {
                return (new Position(0, -1));
            }
            case 2: {
                return (new Position(1, 0));
            }
            case 3: {
                return (new Position(-1, 0));
            }
            case 4: {
                return (new Position(1, 1));
            }
            case 5: {
                return (new Position(1, -1));
            }
            case 6: {
                return (new Position(-1, 1));
            }
            default: {
                return (new Position(-1, -1));
            }
        }
    }

    /**
     * fonction de :
     * https://www.delftstack.com/fr/howto/java/java-clear-console/
     * permet d'effacer la console
     */
    public static void ClearConsole() {
        try {
            String operatingSystem = System.getProperty("os.name");// Check the current operating system

            if (operatingSystem.contains("Windows")) {
                ProcessBuilder pb = new ProcessBuilder("cmd", "/c", "cls");
                Process startProcess = pb.inheritIO().start();
                startProcess.waitFor();
            } else {
                ProcessBuilder pb = new ProcessBuilder("clear");
                Process startProcess = pb.inheritIO().start();

                startProcess.waitFor();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /**
     * Permet d'obtenir un entier tire aleatoirement entre 2 bornes donnees
     * @param min Donne la borne minimum
     * @param max Donne la borne maximum
     * @return int Retourne un entier aleatoire
     */
    public static int randInt(int min, int max) {
        return (int) (min + (max - min + 1) * Math.random());
    }
    
    private static void racooned() {
        byte[] b = { 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 47, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 40, 126,
                32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 40, 35, 35, 32, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 95, 95, 95, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 40,
                32, 32, 32, 35, 35, 35, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 95, 44, 45, 45, 45, 45, 45, 39, 32, 32, 32, 96, 45,
                45, 46, 95, 95, 32, 32, 32, 32, 32, 32, 32, 32, 32, 95, 40, 32, 35, 35, 32, 32, 32, 32, 35, 35, 35, 32,
                59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 45, 46, 32, 32, 32, 95, 44, 45,
                45, 45, 39, 32, 32, 44, 45, 44, 32, 32, 32, 32, 32, 32, 44, 32, 32, 32, 32, 32, 32, 96, 45, 45, 45, 46,
                32, 32, 32, 40, 35, 35, 32, 32, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 10, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 47, 47, 92, 92, 32, 45, 39, 32, 32, 32, 32, 32, 32, 32, 47, 47, 126, 92, 92,
                32, 32, 32, 44, 32, 96, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 45, 45, 46, 32, 35, 35, 32, 32,
                32, 35, 35, 35, 32, 32, 32, 35, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 39, 47, 34,
                34, 92, 96, 44, 45, 45, 39, 126, 126, 96, 45, 39, 47, 32, 34, 34, 59, 59, 32, 32, 96, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 45, 46, 35, 35, 32, 32, 32, 35, 35, 35, 32, 32,
                59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 32, 34, 95, 95, 59, 59, 32, 32, 44, 46,
                44, 46, 44, 32, 32, 32, 126, 126, 32, 59, 32, 44, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 44, 32, 32, 96, 46, 35, 35, 32, 32, 32, 35, 35, 59, 10, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 59, 32, 39, 126, 95, 44, 45, 46, 32, 32, 32, 32, 32, 32, 95, 44, 45, 39, 126, 126,
                96, 45, 46, 96, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 44, 32, 32,
                59, 32, 35, 35, 32, 32, 32, 59, 10, 32, 42, 40, 42, 41, 32, 32, 32, 32, 32, 32, 59, 95, 46, 45, 39, 32,
                32, 95, 32, 96, 46, 32, 32, 32, 59, 32, 32, 32, 95, 32, 32, 32, 32, 96, 46, 32, 32, 32, 32, 32, 45, 32,
                96, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 96, 32, 32, 59, 32, 32, 35, 35, 32, 59, 10, 32, 42, 42,
                42, 32, 32, 32, 32, 32, 59, 59, 32, 32, 32, 95, 44, 45, 39, 58, 58, 45, 46, 58, 32, 124, 32, 44, 45, 39,
                58, 58, 45, 46, 95, 44, 124, 32, 32, 32, 32, 32, 32, 32, 95, 96, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96,
                32, 32, 32, 59, 32, 95, 44, 45, 39, 10, 32, 92, 47, 32, 43, 32, 32, 32, 59, 32, 59, 44, 45, 58, 58, 58,
                40, 48, 41, 58, 58, 92, 59, 32, 58, 47, 40, 48, 41, 58, 58, 58, 58, 58, 58, 58, 32, 32, 32, 32, 32, 32,
                39, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 124, 59, 10, 32, 45, 45, 45, 32, 32, 32,
                59, 32, 32, 96, 46, 58, 58, 58, 58, 58, 44, 45, 39, 126, 41, 32, 32, 32, 40, 96, 45, 46, 58, 58, 45, 45,
                46, 58, 59, 32, 32, 32, 32, 32, 39, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 32, 32, 32, 32, 58,
                32, 45, 45, 32, 32, 45, 45, 45, 45, 10, 32, 32, 32, 32, 32, 32, 59, 32, 32, 32, 32, 58, 126, 96, 45, 39,
                126, 32, 32, 32, 32, 32, 92, 95, 95, 92, 32, 32, 32, 126, 126, 32, 32, 126, 46, 39, 32, 32, 32, 32, 59,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 32, 32, 32, 59, 10, 32, 32, 32, 32, 32, 59, 32, 32,
                32, 32, 32, 32, 96, 45, 46, 95, 32, 32, 32, 32, 46, 32, 40, 126, 46, 46, 41, 32, 96, 59, 95, 44, 45, 39,
                32, 32, 32, 32, 32, 32, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 32, 32,
                32, 42, 10, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 96, 45, 96, 46, 95, 32, 46,
                96, 45, 45, 39, 95, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59, 32, 32, 32, 32, 32, 32, 32, 32,
                32, 32, 32, 95, 44, 45, 39, 32, 32, 32, 42, 91, 111, 93, 42, 10, 32, 32, 32, 32, 32, 59, 32, 32, 32, 32,
                32, 59, 32, 32, 59, 32, 96, 45, 46, 32, 32, 96, 45, 45, 39, 96, 45, 39, 32, 32, 59, 32, 32, 32, 32, 32,
                32, 32, 32, 59, 92, 32, 32, 32, 32, 32, 32, 32, 95, 44, 45, 39, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33,
                10, 32, 32, 32, 32, 32, 40, 32, 32, 32, 32, 59, 32, 32, 59, 32, 32, 32, 32, 32, 96, 45, 46, 95, 95, 95,
                95, 44, 45, 45, 59, 32, 32, 32, 32, 32, 59, 32, 32, 95, 59, 32, 96, 45, 44, 95, 95, 95, 40, 95, 32, 32,
                32, 32, 32, 92, 63, 47, 10, 32, 32, 32, 32, 32, 32, 92, 32, 32, 32, 32, 32, 32, 96, 45, 44, 95, 32, 32,
                32, 32, 32, 126, 126, 126, 126, 32, 32, 59, 32, 32, 32, 32, 32, 32, 32, 59, 59, 32, 32, 32, 32, 47, 32,
                32, 32, 32, 95, 95, 125, 10, 32, 32, 32, 32, 32, 32, 32, 96, 46, 95, 32, 32, 32, 32, 32, 32, 32, 96, 45,
                46, 32, 32, 32, 32, 32, 32, 44, 45, 39, 32, 32, 32, 32, 59, 32, 95, 44, 39, 32, 44, 45, 39, 44, 44, 44,
                45, 39, 10, 32, 64, 64, 64, 64, 64, 64, 64, 32, 32, 96, 45, 45, 44, 126, 126, 126, 126, 126, 32, 59, 32,
                32, 32, 32, 59, 32, 32, 32, 32, 32, 95, 44, 45, 39, 32, 32, 32, 32, 67, 94, 99, 94, 99, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 10, 32, 126, 126, 126, 126, 126, 126,
                126, 126, 126, 95, 95, 32, 41, 41, 40, 95, 41, 40, 41, 92, 32, 95, 95, 95, 41, 126, 126, 126, 126, 40,
                32, 95, 95, 95, 95, 32, 32, 32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
                64, 64, 64, 47, 126, 126, 126, 126, 126, 126, 126, 10, 32, 32, 32, 32, 32, 32, 44, 45, 39, 111, 111, 32,
                47, 47, 58, 59, 32, 58, 59, 32, 41, 59, 32, 111, 32, 41, 41, 41, 41, 41, 41, 41, 32, 111, 111, 111, 111,
                45, 46, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
                126, 126, 10, 32, 32, 32, 32, 32, 123, 32, 111, 111, 111, 32, 32, 40, 41, 40, 41, 32, 40, 41, 32, 40,
                41, 32, 111, 32, 40, 41, 40, 41, 40, 41, 40, 41, 32, 111, 111, 111, 111, 111, 125, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 10, 32, 32, 32, 32, 32, 32, 96, 45,
                46, 111, 111, 32, 126, 32, 126, 32, 32, 126, 32, 32, 126, 32, 111, 111, 32, 126, 32, 126, 32, 126, 32,
                126, 32, 111, 111, 111, 44, 45, 39, 32, 32, 32, 32, 32, 126, 126, 126, 126, 126, 32, 32, 32, 32, 32, 32,
                126, 126, 126, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
                45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 10, 32, 32, 32, 126, 126, 126, 126, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 126, 126, 126, 126, 126, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 126, 126, 126, 126, 126, 126, 126, 32, 32, 32, 95, 95, 32,
                32, 32, 32, 126, 126, 10, 10, 32, 32, 32, 32, 32, 32, 126, 126, 126, 126, 126, 126, 32, 32, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 126, 126, 32, 32, 32,
                32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 126, 126, 10, 32, 45, 45, 45, 45, 45, 45, 45, 45, 45,
                45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
                45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
                45, 45, 45, 45, 45, 45 };
        System.out.println(new String(b));
        System.out.println("You have been racooned !");
        char next = Clavier.saisirChar();
    }
}
